<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Introduction on WebApp Testing</title><link>https://webapppentestguidelines.github.io/newtechtestdoc/</link><description>Recent content in Introduction on WebApp Testing</description><generator>Hugo -- gohugo.io</generator><language>ja</language><atom:link href="https://webapppentestguidelines.github.io/newtechtestdoc/index.xml" rel="self" type="application/rss+xml"/><item><title>EDoS(Economic Denial of Sustainability) - IDaaS</title><link>https://webapppentestguidelines.github.io/newtechtestdoc/docs/cloudsec/idaas/edos/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://webapppentestguidelines.github.io/newtechtestdoc/docs/cloudsec/idaas/edos/</guid><description> EDoS(Economic Denial of Sustainability) # 概要 # IDaaSをはじめとしたクラウドサービスでは、料金はそのサービスの利用に応じて課金される「従量課金制」を採用しています。このような従量課金を採用するサービスでは、課金がなされる要素が増加するごとに利用額が増加します。この特性を攻撃者が悪用することでサービス提供者がサービス継続を行うことができないレベルまで利用額を増加させる攻撃を、Economic Denial of Sustainability(以下 EDoSと呼称する)と呼びます。
本稿ではAmazon Cognitoを例に、このEDoSについて解説をしていきます。
原因 # 概要でも触れましたが、主な原因として「課金がなされる要素が増加する」ことがEDoSを引き起こす原因となります。Amazon Cognito User Poolで外的要因でこの課金額を増加させる方法として、「月間のアクティブユーザー(MAU)の増加」が挙げられます。
このMAUはCognito User Poolに対して、サインインやサインアップ等の機能を利用したユーザーを1として加算され、100,000MAU以下の場合、1MAUあたり0.0055USD加算されます。
MAU MAUあたりの料金 ～ 100,000 0.0055USD 90万 0.0046USD 900万 0.00325USD 1,000万超 0.0025USD このような料金形態を取るCognito User Poolでは、Cognito User Poolのセルフサインアップが有効化されている際に、攻撃者が大量のユーザーを作成することでサービス提供者が意図しない形でMAUが増加し、料金として請求されます。
影響 # 意図しない利用料金の請求により、サービス提供を行うための予算が利用され、サービスの提供ができなくなる恐れがあります。
事例紹介 # 現時点では現実世界においてCognito User Poolをはじめとして、IDaaSを用いたEDoSや利用料金の増加は報告されていません。ただし、NHK厚生文化事業団が運営する寄付サイトへの偽計業務妨害事案をはじめとし、従量課金を行うサービスにおいて、意図しない課金のためサービスが停止した例や、実装の不備により異常な課金が発生した例は報告されています。
対策 # 対策としては、攻撃者のユーザー作成やログインの自動化を難しくすることで大量のユーザーの追加を防ぐことができるでしょう。
自動化を難しくする方法として、Custom authentication challengeやAWS WAF等のCognito User Poolの拡張機能を用い、reCaptchaの導入や、Lambdaトリガーを用いたEmailアドレスの検証とエイリアス利用の制限等が挙げられます。
学習方法/参考文献 # EDoS Attack: クラウド利用料金でサービスを止められるって本当？: Amazon Cognito User Pool</description></item><item><title>アプリケーションの権限に関するカスタム属性の変更 - IDaaS</title><link>https://webapppentestguidelines.github.io/newtechtestdoc/docs/cloudsec/idaas/modify_custom_attributes_for_permissions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://webapppentestguidelines.github.io/newtechtestdoc/docs/cloudsec/idaas/modify_custom_attributes_for_permissions/</guid><description>アプリケーションの権限に関するカスタム属性の変更 # 概要 # IDaaSの機能を誤って利用することにより、ユーザーに紐づくカスタム属性などの変更が可能になり、アプリケーションにおける権限昇格や意図しないアクセスを引き起こす可能性が存在します。
原因 # 権限情報に関するカスタム属性を変更する機能のアクセス制御が適切に行われていないことから、第三者が属性の変更をおこなってしまい権限を書き換える可能性が存在します。本稿ではAmazon Cognitoの誤った利用を例に原因について解説を行っていきます。
誤った利用の例 1. 権限に関する属性が変更可能
ユーザーに対してアプリケーションの権限に関する属性の変更権限を与えることにより、属性を任意の値に変更される恐れがあります。
$ ACCESS_TOKEN=&amp;#34;eJy...&amp;#34; # JWT形式のアクセストークン $ aws cognito-idp update-user-attributes \ --user-attributes Name=&amp;#34;custom:role&amp;#34;,Value=&amp;#34;admin&amp;#34; \ # アプリケーションの権限に関わるカスタム属性の変更 --access-token $ACCESS_TOKEN 誤った利用の例 2. 公開されたによるクライアントIDによるアクセス制御
一部IDaaSでは、自らの情報へアクセスを行う際にクライアントIDのような特定の識別子を用いてアクセスを行います。このクライアントIDはユーザーの属性に関する変更や閲覧に関する操作を司っており、OIDCにおけるScopeのような動作をします。
このクライアントIDを用いてユーザーの属性変更に関するアクセス制御を行なっており、かつ取得に制限のかけられていないJavaSctriptファイルやapkファイルなどにこの管理者用のクライアントIDが含まれている場合、攻撃者はこのクライアントIDを用いてTokenを発行し、自らの権限に関わる属性を変更しアプリケーション内の権限を昇格させることが可能です。
影響 # 本来であれば閲覧を想定していない第三者が、該当の画面やエンドポイントへのアクセスを行える可能性があります。
対策 # 根本的対策 # 根本的対策として、一般ユーザーから権限に関わるカスタム属性の値を変更させないようにしてください。権限に関わるカスタム属性の操作を必要とする場合はRBAC等を用いて管理者権限のもののみが変更できるようにしてください。
また、カスタム属性を利用しないで権限を管理する機能がある場合、その機能を用いることも検討してください。
一時的対策 # 一時的対策として、IDaaSへのIP制限等を行い、管理者利用するIDaaSへの一般ユーザーのアクセスをIPレベルで制限してください。
また、本対策を恒久的な対策とせず、根本的な対策を用いて順次対策を行なってください。
具体: Amazon Cognito User Pool # Amazon Cognito User Poolにおいては、ユーザーの属性で権限情報を管理することも可能ですが、Cognito User Poolの管理者APIに対してRBACを実装する場合、このユーザーグループを用いて管理することも検討してください。
学習方法/参考文献 # Amazon Web Service - Amazon Cognito - ユーザープール属性 Amazon Web Service - Amazon Cognito - ユーザーグループ Flatt Security inc.</description></item><item><title>デフォルトエラーに起因するユーザーの開示 - IDaaS</title><link>https://webapppentestguidelines.github.io/newtechtestdoc/docs/cloudsec/idaas/default_error/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://webapppentestguidelines.github.io/newtechtestdoc/docs/cloudsec/idaas/default_error/</guid><description> デフォルトエラーに起因するユーザーの開示 # 概要 # 攻撃者にとってアプリケーションが返すエラーレスポンスは、攻撃を実施する上で大きなヒントを与えることがあります。代表的な例として、Internal Server Error時にサーバー上のプログラムの断片や、SQL文などが見えてしまうなどがあるでしょう。
認証においても同様で、認証情報がそのサービスで使われているのかを示す詳細なエラーを返すことにより、攻撃者に標的となるユーザーの存在を知らせてしまう可能性があります。
そのような観点からIDaaSでも攻撃者を利するエラーメッセージについては削除や表記の統一を図ることが必要です。
原因 # CognitoをはじめとするIDaaSのエラーメッセージではデフォルトのメッセージが詳細な情報をレスポンスとして返すケースが存在します。
Auth0の場合 Cognitoの場合 影響 # エラーメッセージにおいてサービスに登録しているユーザーのメールアドレスを確認することが可能です。 攻撃者はメールアドレスを確認することにより、過去に流出した認証情報との組み合わせをもとにアカウントへの不正アクセス行われる可能性があります。
対策 # 対策として、デフォルトのエラーメッセージを変更し、認証認可に係るエラーに関して統一されたカスタムメッセージに変更することをお勧めします。
また、上記の対策が不可能なサービス(Firebase AuthのID/Pass認証)も存在するため、その点を考慮して対策等をおこなってください。
学習方法/参考文献 # Amazon Web Service - Amazon Cognito - エラーレスポンスの管理 Auth0 OWASP チートシート - 認証とエラー メッセージ Amazon Web Service - Amazon Cognito - 認証チャレンジの作成の Lambda トリガー</description></item><item><title>意図しないサインアップ経路の存在 - IDaaS</title><link>https://webapppentestguidelines.github.io/newtechtestdoc/docs/cloudsec/idaas/presence_of_unintended_signup_paths/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://webapppentestguidelines.github.io/newtechtestdoc/docs/cloudsec/idaas/presence_of_unintended_signup_paths/</guid><description>意図しないサインアップ経路の存在 # 概要 # 管理者画面や会員向けのサービスなどの設計や要件レベルでサインアップ経路を制限しているアプリケーションにおいて、IDaaSの設定不備や誤った利用によって意図しない形でのサインアップが可能になっている場合が存在します。
原因 # 管理者画面や会員向けのサービスなどの設計や要件レベルでのサインアップ経路の例として、管理者以外がユーザーの作成を想定していないケースが存在します。本稿ではAmazon Cognitoの誤った利用を例に原因について解説を行っていきます。
$ CLIENT_ID=&amp;#34;xxxxxxxxxxxxxxxxxxxxxxxxxx&amp;#34; $ USER_NAME=&amp;#34;username&amp;#34; $ PASSWORD=&amp;#34;P4ssW0rD&amp;#34; $ ATTRIBUTES=&amp;#34;[]&amp;#34; $ aws cognito-idp sign-up \ --client-id $CLIENT_ID \ --username $USER_NAME \ --password $PASSWORD \ --user-attributes $ATTRIBUTES \ --no-sign-request 誤った利用の例. サインアップに関する不適切な権限の分離
Amazon Cognito User Poolをはじめ、一部のIDaaSではクライアントIDのような識別子を用いて発行されるTokenに権限設定しています。Cognitoではアプリクライアントと呼ばれるクライアントIDを用いてTokenを発行しており、このアプリクライアントに設定される権限をOIDCのScopeとして、JWT形式のトークンを発行します。
このアプリクライアントを一般ユーザーと管理者ユーザーで別けて利用している場合、属性へのアクセスに関しては制御可能ですが、サインアップに関してはアプリクライアントを介して制御できません。そのため、第三者がこのアプリクライアントを介して自己サインアップできる可能性があります。
影響 # 本来であれば閲覧を想定していない第三者が、該当の画面やエンドポイントへのアクセスを行える可能性があります。
対策 # 限定されたサインアップの場合、自己サインアップをはじめとした、利用者が自らユーザーを作成できる機能の無効化をおこなってください。また、自己サインアップ機能を無効化できない場合、それに準ずる対策をおこなってください。
また、管理者による作成に際しては、各IDaaSの提供するAPIへのアクセス方法に準拠し管理者用APIを用いて作成を行なっていることを確認してください。
確認リスト # 仕様上、第三者のサインアップを許可していない 第三者のサインアップを許可していない場合 IDaaSの設定で自己サインアップが制御できる 自己サインアップが許可されていない IDaaSの設定で自己サインアップが制御できない 他の機能を用いて認可制御を行える 根本的対策 # 自己サインアップを許可しない設計や要件の場合、根本的対策として該当する機能を無効化し、ユーザーによるサインアップを許可しないようにしてください。無効後に新規作成を行う際は、RBAC等のアクセス制御をもちいて、操作が可能なユーザーを絞りユーザーの新規作成を行なってください。
また、IDaaSにおいて、自己サインアップを無効化できない場合は、管理者による新規作成フローにおいて、利用者から操作できないカスタム属性などを用いて、該当アカウントが管理者作成のアカウントであることを証明する属性を追加し、認可やアクセス制御の際に確認を行なってください。
一時的対策 # 一時的対策として、IDaaSへのIP制限等を行い、管理者利用するIDaaSへの一般ユーザーのアクセスをIPレベルで制限してください。
また、本対策を恒久的な対策とせず、根本的な対策を用いて順次対策を行なってください。
具体: Amazon Cognitoの場合 # Amazon Cognito User Poolにおいては、ユーザーの自己サインアップを無効化する機能が存在するので、この機能の無効化をおこなってください。</description></item><item><title>FaaSにおける設定不備と脆弱性の悪用</title><link>https://webapppentestguidelines.github.io/newtechtestdoc/docs/cloudsec/faas/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://webapppentestguidelines.github.io/newtechtestdoc/docs/cloudsec/faas/</guid><description>FaaSにおける設定不備と脆弱性の悪用 # 概要 # 本稿では、ウェブやモバイルのアプリケーションで利用されるプログラムの実行を行うサービスである、FaaSの活用と、実装や利用方法が起因となるアプリケーションの脆弱性について解説を行います。
FaaSとは # FaaS(Function as a Service)は、サーバーレスなアプリケーションやマイクロサービスで用いられるサービスで、一定の制約下でプログラムの実行を実行可能にする、IaaSやPaaSのようにクラウド上で利用可能なコンピュータリソースを提供するサービス形態の一つです。
このFaaSは多くのクラウドベンダーで提供されており、私たちは気づかないうちにこれらサービスと向き合っているかもしれません。
AWS Lambda Google Cloud Functions Azure Functions Cloudflare Workers Netlify Functions FaaSの特徴として、あるイベントをトリガーにLambdaにホストされたプログラムが実行されることが挙げられます。下記に簡単な例
例: Amazon Web Service Japan 形で考えるサーバーレス設計より
API Gateway + Lambda + DynamoDBを用いたAPI APIをサーバーレスで構築する際の基本パターンで、API Gatewayへのリクエストをトリガーに実行されます。 S3にアップロード時に画像を加工するためのLambda S3 Bucketに画像やファイルをアップロードしたイベントをトリガーにLambdaを実行するデザインパターンです。 SNS + SQS(Queue) + Lambdaを用いた業務処理 各種重要処理や競合/重複状態を回避するために利用されるデザインパターンで、SNSのPubSub機能を用いて、SQSに投入し、LambdaがそのイベントをもとにQueueに入ったデータを取得し実行されます。 脆弱性 / 脅威 / 悪用 # 本稿では、FaaSの利用や設定ミスによって発生するセキュリティ上の脅威や悪用について、下記のページにて触れていきます。また、Injectionやエラー情報の開示といった「アプリケーションの実装」に起因するものは個別には取り扱いませんのでご了承ください。
概要 # 多くのクラウドプロバイダーの提供するFaaSでは、プログラムを実行する際に用いる環境変数を設定できる機能が存在します。これら環境変数機能を用いることで、FaaS上で動作するアプリケーション等に値を渡すことが可能です。 この機能では基本的にAPIキーやDBの認証情報、IAMの認証情報などの機密性の高い情報を格納することを非推奨の項目としています。しかし、この環境変数内に認証情報を格納することは禁止されているわけではないため、利用者の実装次第ではこれら情報が含まれている可能性が存在します。 このように環境変数を用いることは、直接的な攻撃につながるわけではありませんが潜在的に認証情報が取得される可能性を高めている状況にあります。
原理 # FaaSの環境変数に格納された認証情報は、/proc/self/environ等から読み取ることが可能で、アプリケーション上の実装の不備をつくことで、入手される可能性があります。
擬似環境での解説 # 例として、AWS Lambda(AWSの提供するFaaS)上で動作する擬似的な環境をもとに解説をします。
擬似環境の構成図 このAWS Lambdaには、環境変数にSECRET_KEYという環境変数が設定されており、その値にはSECRET_DUMMYという値が設定されています。そして、動作するコードとして下記のようなJavaScriptのコードが動いています。 このアプリケーションはざっくりな機能として、S3からファイルを取得し、その後Lambda内で加工してクライアントに返すという機能を持っています。 app.</description></item><item><title>Webアプリケーションの脆弱性を利用した認証情報の窃取</title><link>https://webapppentestguidelines.github.io/newtechtestdoc/docs/cloudsec/cloud_credential/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://webapppentestguidelines.github.io/newtechtestdoc/docs/cloudsec/cloud_credential/</guid><description>Webアプリケーションの脆弱性を利用した認証情報の窃取 # 概要 # クラウド環境を利用してWebサービスを提供するシステムにおいて、脆弱性を利用されクラウドサービス側の認証情報（認証キー・APIトークンなど）を窃取されてしまう可能性が危険視されています。 これらの認証情報が漏洩した場合には、漏洩した認証情報に紐づく権限を利用され、クラウドプラットフォーム側の機能を悪用されてしまう危険性があります。 上記のような攻撃には従来から存在するWebアプリケーションの脆弱性を利用される可能性があります。
原因と影響 # 認証情報の種類や存在する場所などについては、利用しているクラウドプラットフォームやサービスの種類によって異なります。 あくまで一例ですがシステム内の環境変数・設定ファイルなどにこれらの認証情報が設定されているケースが多く、Webアプリケーションの脆弱性を利用されることによって窃取されてしまう危険性があります。
Webアプリケーションにて詳細情報を表示するエラー画面などから環境変数に設定された認証情報が漏洩 ディレクトリトラバーサルの脆弱性を利用されて、設定ファイルに記載された認証情報が漏洩 また、AWSなどのパブリッククラウドサービスではメタデータサービスと呼ばれる機能が存在します。 この機能では、メタデータと呼ばれるインスタンス固有のデータ(インスタンスID、OSデータ、一時的に付与される認証情報など)を内部Web APIを通じて取得するといったしくみが提供されています。 SSRF(Server Side Request Forgery)の脆弱性を利用することで、この機能を悪用してメタデータを不正に取得され、認証情報を窃取されてしまう攻撃手法が知られています。
診断観点 # 本記事ではAWS環境を題材にSSRFの脆弱性を利用して、認証情報を取得する流れについて紹介します。
SSRFは、攻撃者が指定した任意のサーバに対してHTTPリクエストを行うように、サーバサイドアプリケーションを誘導させるというものです。 これを利用して、攻撃者は脆弱性の存在するサーバを踏み台として他サーバにアクセスしたり、自身が直接到達できないサーバに対してアクセスできます。
脆弱性の例として、以下のPHPのサンプルコードを用意しました。
&amp;lt;?php
if (isset($_GET[&amp;#39;url&amp;#39;])){
$url = $_GET[&amp;#39;url&amp;#39;];
$conn = curl_init();
curl_setopt($conn, CURLOPT_URL, $url);
curl_setopt($conn, CURLOPT_RETURNTRANSFER, true);
$res = curl_exec($conn);
echo $res;
curl_close($conn);
}
?&amp;gt; GETパラメータで取得したURL値に対して、PHPのcURL関数によりHTTPリクエストを送信し、結果を出力するだけのシンプルなコードです。 もしこのようなWebアプリケーションが存在し、公開されていた場合にはSSRF攻撃を受けてしまう可能性があります。 上記で説明したように、このWebアプリケーションではurlパラメータに指定した値をそのままcURL関数にて取得する実装となっています。 そのため、クライアント側がurlパラメータに任意のURL値を指定して受け渡すことで、Webアプリケーションに指定したURLの対象に対してアクセスさせ、レスポンスを取得できます。
この挙動を利用することで、以下の図のように攻撃者は本来アクセスできないような対象に対して、Webアプリケーションを経由してアクセスを行い、情報を取得できます。 これは、SSRFを用いた内部ネットワークへの攻撃の一例となります。
もし、クラウド環境にて提供されているWebアプリケーションに上記のようなSSRFの脆弱性が存在する場合には、この機能を悪用され、メタデータを不正に取得されてしまう可能性があります。以下の図では、AWS環境におけるSSRF攻撃を記載しています。
図ではIAMロールが紐づいた状態のEC2インスタンスにおけるSSRF攻撃によって、Webアプリケーション側がメタデータサーバのAPIへ一時的な認証情報を要求するリクエストを強制させられています。 その結果、EC２のIAMロールに紐づいた認証情報を窃取されてしまう流れを記載しています。 ここでは、EC2にアタッチされているIAMロールに関連付けられた認証情報を、この図のようなSSRF攻撃によって取得する流れの詳細を説明します。
AWSのメタデータサーバに関する仕様は以下に記載されています。
インスタンスメタデータとユーザーデータ EC2インスタンス上より上記仕様に記載されているURLにアクセスすることで、該当するメタデータの情報を取得できます。 EC2インスタンスにアタッチされたIAMロールが存在する場合には、以下のメタデータサーバのURLにアクセスすることで、認証情報を取得できます。
http://169.254.169.254/latest/meta-data/iam/security-credentials/[role-name] 上記のパス中の[role-name]の部分にはEC2にアタッチされているIAMロールの名前を指定する必要があります。 上記URLにアクセスすることで指定したIAMロールに関連付けられた一時的なセキュリティ認証情報が格納される仕様となっています。なお、IAMロール名は以下のURLアクセスすることで取得できます。
http://169.254.169.254/latest/meta-data/iam/security-credentials/ AWSのEC2上でSSRFの脆弱性が存在するサンプルコードのWebアプリケーション(ssrf.php)が動作しているとします。 まず、SSRFの脆弱性を利用してメタデータサーバのURLをパラメータ値として脆弱性の存在するWebアプリケーションに送信することによって、EC2にアタッチされたrole-nameを取得します。</description></item><item><title>クラウドストレージサービスにおける設定不備</title><link>https://webapppentestguidelines.github.io/newtechtestdoc/docs/cloudsec/storage_service/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://webapppentestguidelines.github.io/newtechtestdoc/docs/cloudsec/storage_service/</guid><description>クラウドストレージサービスにおける設定不備 # 概要 # クラウドストレージサービスとは、インターネット上にてファイルの保管・共有などができるサービスです。 画像やJavaScriptファイルなどの静的ファイルを公開する用途などでも利用されています。 有名処のものとしては以下のようなサービスがあります。
AWS S3 Azure Blob Storage Cloud Storage 近年ではこれらクラウドストレージサービスの設定ミスによるセキュリティインシデントが発生しています。
原因と影響 # クラウドストレージサービスにおけるアクセス許可の設定不備が原因となり、意図しない情報がインターネット上に公開されてしまう可能性があります。 また、ファイルのアップロードが可能となっている場合には、公開しているコンテンツに悪意あるコードを埋め込まれ、攻撃に利用されてしまう可能性もあります。
診断観点 # クラウドストレージの設定ミスを確認するシンプルな方法としては、クラウドストレージのエンドポイントに対応するURLへアクセスすることです。 そして、セキュリティ上問題となるような設定やコンテンツが公開されていないかを確認します。 本記事ではAWS S3を例として、脆弱性診断における本手法について説明します。
S3バケットを示すエンドポイントのURLについて調査 # クラウドストレージを示すURLの形式に関する仕様は以下のように公開されています。
AWS S3 Azure Blob Storage Cloud Storage ここではAWS S3について解説しますが、S3ではクラウドストレージのエンドポイントを示すURLは以下2種類のタイプが存在します。
仮想ホスト形式
http://&amp;lt;backet-name&amp;gt;.s3-&amp;lt;region&amp;gt;.amazonaws.com/ http://&amp;lt;backet-name&amp;gt;.s3.amazonaws.com/
2019 年 3 月 20 日より後に開始されたリージョンで作成されたバケットでは2の形式(レガシーグローバルエンドポイント)では到達できないようです。 パス形式
http://s3-&amp;lt;region&amp;gt;.amazonaws.com/&amp;lt;backet-name&amp;gt; http://s3.amazonaws.com/&amp;lt;backet-name&amp;gt;
米国東部 (バージニア北部) リージョンは2の形式で、ほかのリージョンは1の形式となります。パス形式は将来的には廃止が検討されているようです。 上記の仕様を利用して、特定キーワードなどに関連するS3バケットのエンドポイントのURLを推測できます。 また、S3バケットにおいて独自ドメインを利用して、静的なサイトをホスティングする場合には、前提としてバケット名とドメイン名が一致しなければなりません。 このため、Webページのドメイン名などからもエンドポイントのURLを推測できます。
特定のキーワードに関連するS3バケットを探索するようなツールも多数公開されています。
s3recon s3finder また、公開状態のクラウドストレージやファイルの情報を定期的に収集し、検索できるオンラインサービスなども存在します。本サービスでは、S3だけではなくAzureやGCPなど他クラウドサービスの情報も検索できます。
Grayhatwarfare 脆弱性診断の実施時には、HTMLソース・HTTPレスポンス・モバイルアプリケーションのソースコード内などに、S3バケットのURLや探索するためのキーワードが、存在しないかを確認すべきでしょう。 発見したキーワードをもとにクラウドストレージのエンドポイントを探索してみてください。 なお、探索によって存在が判明したS3バケットのエンドポイントのURLが診断対象の範囲に含まれるかどうかについては、調査する前にあらかじめ顧客やサイト管理者に対して確認するべきであると考えます。
ブラウザでの確認 # ブラウザ経由でアクセスして、S3バケットにおいてファイルの一覧の表示が許可されている場合には以下のようなXML形式のレスポンスが表示されます。
この設定状態の場合には、不特定多数へストレージ内に存在するファイルの内容が判明してしまうため、いわゆるディレクトリリスティングと同様の問題があるといえます。そのためこの設定状態が意図したものであるかを確認すべきでしょう。
コマンドラインでの確認 # コマンドラインを用いて、クラウドストレージのファイルのダウンロードや、ファイルのアップロードについて確認できます。</description></item></channel></rss>