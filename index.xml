<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Introduction on WebApp Testing</title><link>/</link><description>Recent content in Introduction on WebApp Testing</description><generator>Hugo -- gohugo.io</generator><language>ja</language><atom:link href="/index.xml" rel="self" type="application/rss+xml"/><item><title>Webアプリケーションの脆弱性を利用した認証情報の窃取</title><link>/docs/cloudsec/cloud_credential/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/cloudsec/cloud_credential/</guid><description>Webアプリケーションの脆弱性を利用した認証情報の窃取 # 概要 # クラウド環境を利用してWebサービスを提供するシステムにおいて、Webアプリケーションに作りこまれた脆弱性を悪用されて、クラウドサービス側の認証情報（認証キー・APIトークンなど）を窃取されてしまう可能性が危険視されています。 これらの認証情報が漏洩した場合には、漏洩した認証情報に紐ずく権限を利用され、クラウドプラットフォーム側の機能を悪用されてしまう危険性があります。
原因と影響 # 認証情報の種類や存在する場所などについては、利用しているクラウドプラットフォームやサービスの種類によって異なりますが、システム内の環境変数・設定ファイルなどにこれらの認証情報が設定されているケースが多く、例えば以下のような従来から存在するWebアプリケーションの脆弱性を利用されることによって窃取されてしまう危険性があります。
Webアプリケーションにて詳細情報を表示するエラー画面などから環境変数に設定された認証情報が漏洩 ディレクトリトラバーサルの脆弱性を利用されて、設定ファイルに記載された認証情報が漏洩 また、AWSなどのパブリッククラウドサービスではメタデータサービスと呼ばれる機能が存在します。この機能では、メタデータと呼ばれるインスタンス固有のデータ(インスタンスID、OSデータ、一時的に付与される認証情報など)を内部WebAPIを通じて取得するといった仕組みが提供されています。クラウド環境にて提供されるWebアプリケーションにおいてSSRF(Server Side Request Forgery)の脆弱性が存在する場合には、この機能を悪用されてメタデータを不正に取得され、認証情報を窃取されてしまう攻撃手法が知られています。
診断観点 # 本記事ではAWS環境を題材にSSRFを脆弱性を利用して、認証情報を取得する流れについて紹介します。
SSRFは、攻撃者が指定した任意のサーバーに対してHTTPリクエストを行うように、サーバーサイドアプリケーションを誘導させるというものです。 これを利用して、攻撃者は脆弱性の存在するサーバーを踏み台として他サーバーにアクセスしたり、自身が直接到達することができないサーバーに対してアクセスすることができます。
脆弱性の例として、以下のPHPのサンプルコードを用意しました。
&amp;lt;?php
if (isset($_GET[&amp;#39;url&amp;#39;])){
$url = $_GET[&amp;#39;url&amp;#39;];
$conn = curl_init();
curl_setopt($conn, CURLOPT_URL, $url);
curl_setopt($conn, CURLOPT_RETURNTRANSFER, true);
$res = curl_exec($conn);
echo $res;
curl_close($conn);
}
?&amp;gt; GETパラメータで取得したURL値に対して、PHPのcURL関数によりHTTPリクエストを送信し、結果を出力するだけのシンプルなコードです。 もしこのようなWebアプリケーションが存在し、公開されていた場合にはSSRF攻撃を受けてしまう可能性があります。 上記で説明したように、このWebアプリケーションではurlパラメータに指定した値をそのままcURL関数にて取得する実装となっているため、クライアント側がurlパラメータに任意のURL値を指定して受け渡すことで、Webアプリケーションに指定したURLの対象に対してアクセスさせ、レスポンスを取得することが可能です。
この挙動を利用することで、以下の図のように攻撃者は本来アクセスできないような対象に対して、Webアプリケーションを経由してアクセスを行い、情報を取得することが可能となります。 これは、SSRFを用いた内部ネットワークへの攻撃の一例となります。
もし、クラウド環境にて提供されているWebアプリケーションに上記のようなSSRFの脆弱性が存在する場合には、この機能を悪用され、メタデータを不正に取得されてしまう可能性があります。以下の図では、AWS環境におけるSSRF攻撃を記載しています。
図ではIAMロールが紐づいた状態のEC2インスタンスにおけるSSRF攻撃によって、Webアプリケーション側がメタデータサーバーのAPIへ一時的な認証情報を要求するリクエストを強制させられ、EC２のIAMロールに紐づいた認証情報を窃取されてしまう流れを記載しています。ここでは、EC2にアタッチされているIAMロールに関連付けられた認証情報を、この図のようなSSRF攻撃によって取得する流れの詳細を説明します。
AWSのメタデータサーバーに関する仕様は以下に記載されています。
インスタンスメタデータとユーザーデータ EC2インスタンス上より上記仕様に記載されているURLにアクセスすることで、該当するメタデータの情報を取得することができます。EC2インスタンスにアタッチされたIAMロールが存在する場合には、以下のメタデータサーバーのURLにアクセスすることで、認証情報を取得することができます。
http://169.254.169.254/latest/meta-data/iam/security-credentials/[role-name] 上記のパス中の[role-name]の部分にはEC2にアタッチされているIAMロールの名前を指定する必要があります。上記URLにアクセスすることで指定したIAMロールに関連付けられた一時的なセキュリティ認証情報が格納される仕様となっています。なお、IAMロール名は以下のURLアクセスすることで取得することが可能です。
http://169.254.169.254/latest/meta-data/iam/security-credentials/ AWSのEC2上でSSRFの脆弱性が存在するサンプルコードのWebアプリケーション(ssrf.php)が動作しているとします。 攻撃の流れとしては、まずSSRFの脆弱性を利用してメタデータサーバーのURLをパラメータ値として脆弱性の存在するWebアプリケーションに送信することによって、EC2にアタッチされたrole-nameを取得します。
リクエストURL ssrf.php?url=http://169.254.169.254/latest/meta-data/iam/security-credentials/ レスポンス HTTP/1.1 200 OK
Date: Wed, 22 Feb 2023 17:22:20 GMT
Server: Apache/2.</description></item><item><title>クラウドストレージサービスにおける設定不備</title><link>/docs/cloudsec/storage_service/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/cloudsec/storage_service/</guid><description>クラウドストレージサービスにおける設定不備 # 概要 # クラウドストレージサービスとは、インターネット上にてファイルの保管・共有などができるサービスです。 画像やJavascriptファイルなどの静的ファイルを公開する用途などでも利用されています。 有名処のものとしては以下のようなサービスがあります。
AWS S3 Azure Blob Storage Cloud Storage 近年ではこれらクラウドストレージサービスの設定ミスによるセキュリティインシデントが発生しています。
原因と影響 # クラウドストレージサービスにおけるアクセス許可の設定不備が原因となり、意図しない情報がインターネット上に公開されてしまう可能性があります。 また、ファイルのアップロードが可能となっている場合には、公開しているコンテンツに悪意あるコードを埋め込まれ、攻撃に利用されてしまう可能性もあります。
診断観点 # クラウドストレージの設定ミスを確認するシンプルな方法としては、クラウドストレージのエンドポイントに対応するURLに実際にアクセスし、セキュリティ上問題となるような設定やコンテンツが公開されていないかを確認をすることが挙げられます。本記事ではAWS S3を例として、脆弱性診断における本手法について説明します。
S3バケットを示すエンドポイントのURLについて調査 # クラウドストレージを示すURLの形式に関する仕様は以下のように公開されています。
AWS S3 Azure Blob Storage Cloud Storage ここではAWS S3について解説しますが、S3ではクラウドストレージのエンドポイントを示すURLは以下2種類のタイプが存在します。
仮想ホスト形式
http://&amp;lt;backet-name&amp;gt;.s3-&amp;lt;region&amp;gt;.amazonaws.com/ http://&amp;lt;backet-name&amp;gt;.s3.amazonaws.com/
2019 年 3 月 20 日より後に開始されたリージョンで作成されたバケットでは2の形式(レガシーグローバルエンドポイント)では到達できないようです。 パス形式
http://s3-&amp;lt;region&amp;gt;.amazonaws.com/&amp;lt;backet-name&amp;gt; http://s3.amazonaws.com/&amp;lt;backet-name&amp;gt;
米国東部 (バージニア北部) リージョンは2の形式で、他のリージョンは1の形式となります。パス形式は将来的には廃止が検討されているようです。 上記の仕様を利用して、特定キーワードなどに関連するS3バケットのエンドポイントのURLを推測することが可能です。 また、S3バケットにおいて独自ドメインを利用して、静的なサイトをホスティングする場合には、前提としてバケット名とドメイン名が一致する必要があります。このため、Webページのドメイン名などからもエンドポイントのURLを推測をすることが可能です。
特定のキーワードに関連するS3バケットを探索するようなツールも多数公開されています。
s3recon s3finder また、公開状態のクラウドストレージやファイルの情報を定期的に収集し、検索できるオンラインサービスなども存在します。本サービスでは、S3だけではなくAzureやGCPなど他クラウドサービスの情報も検索できます。
Grayhatwarfare 脆弱性診断を行う際にはクラウドストレージのエンドポイントにアクセスするために、診断対象サイトのHTMLソース・HTTPレスポンス・モバイルアプリケーションのソースコード内などに、S3バケットのURLや探索を行うためのキーワードが、存在しないかを確認すべきでしょう。なお、探索によって存在が判明したS3バケットのエンドポイントのURLが診断対象の範囲に含まれるかどうかについては、調査を行う前にあらかじめ顧客やサイト管理者に対して確認を行うべきであると考えます。
ブラウザでの確認 # ブラウザ経由でアクセスした場合に、S3バケットにおいてファイルの一覧の表示が許可されている場合には以下のようなXML形式のレスポンスが表示されます。
この設定状態の場合には、不特定多数にストレージ内に存在するファイルの内容が判明してしまうため、いわゆるディレクトリリスティングと同様の問題があるといえます。そのためこの設定状態が意図したものであるかを確認すべきでしょう。
コマンドラインでの確認 # コマンドラインを用いて、クラウドストレージのファイルのダウンロードや、ファイルのアップロードについて確認することができます。
S3バケットであればAWS CLIを利用することで上記をテストできます。 S3においては、S3バケットのACLがAll Authenticated AWS Usersと設定されている可能性もあるため、AWSユーザーとして認証された状態でもコマンドラインを実行する方が良いでしょう。</description></item><item><title/><link>/docs/nosql_injection/nosqli/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/nosql_injection/nosqli/</guid><description>NoSQL Injectionとは # NoSQLデータベースを利用したWebアプリケーションにおける脆弱性の事です。 NoSQLはより柔軟なデータ形式を使用する、SQLを利用しないデータベースシステムを指します。一般的にデータを以下の4つに管理します。 key-value型、列指向型、グラフ型、ドキュメント型の4つです。
NoSQL Injectionの原因 # NoSQLデータベースは、SQLデータベースとは異なり、クエリを実行する際にデータを構造化された形式で保存する必要がないため、従来のSQL Injectionとは異なる形で攻撃が発生します。こういったことが起こる原因として、以下のようなものが考えられます。
不十分な入力値の検証 クエリの構築における不適切な処理 データベースの設定不備 NoSQL Injectionが及ぼす影響 # 攻撃者はパラメータを改ざんし、データベースに意図しない挙動をさせることができます。 また、使用するnosqlの種類によっては任意のJavaScriptを実行される可能性もあります。 よって、アプリケーションの機密性、整合性、可用性を損ないます。
事例紹介 # CVE-2021-22911 # Rocket Chatで見つかったNoSQLInjectionです。 getPasswordPolicy関数で、NoSQL Injectionが実行できます。 認証/認可を必要とせずに、パスワードリセットトークンを流出させることで、アカウントの乗っ取りが可能でした。 管理者アカウントを乗っ取ることで、RCEにつなげることも可能だったようです。
ref : https://www.cve.org/CVERecord?id=CVE-2021-22911
CVE-2021-20736 # GROWI 日本製のOSSで見つかったNoSQL Injectionです。 Gitの編集ログをみるに、アクセストークンパーサにNoSQL Injectionがありました。
ref : https://weseek.co.jp/ja/news/2021/06/14/growi-nosql-ingection/
ref : JVN#95457785
CVE-2020-35666 # Software : Steedos Low Code DevOps Platformで見つかったNoSQL Injectionです。
ポストされるパラメータを、X-User-Id[$ne]=1のように書き換える事で、攻撃が実行されます。
ref : https://github.com/steedos/steedos-platform/issues/1245
診断観点 # SSJIとは # SSJIは、Server Side JavaScript Injectionが正式名称となっています。これは、JavaScript実行の不適切な設定などによって、攻撃者から送信された不正なJavaScriptコードが、サーバサイド側にて実行されてしまう攻撃手法のことです。
Mongo # 以降は脆弱なアプリケーションを利用して、それぞれの攻撃を確認します。</description></item></channel></rss>