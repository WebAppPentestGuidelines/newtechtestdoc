<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>IDaaSの活用に起因する脆弱性とその悪用 on WebApp Testing</title><link>https://webapppentestguidelines.github.io/newtechtestdoc/docs/cloudsec/idaas/</link><description>Recent content in IDaaSの活用に起因する脆弱性とその悪用 on WebApp Testing</description><generator>Hugo -- gohugo.io</generator><language>ja</language><atom:link href="https://webapppentestguidelines.github.io/newtechtestdoc/docs/cloudsec/idaas/index.xml" rel="self" type="application/rss+xml"/><item><title>EDoS(Economic Denial of Sustainability) - IDaaS</title><link>https://webapppentestguidelines.github.io/newtechtestdoc/docs/cloudsec/idaas/edos/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://webapppentestguidelines.github.io/newtechtestdoc/docs/cloudsec/idaas/edos/</guid><description> EDoS(Economic Denial of Sustainability) # 概要 # IDaaSをはじめとしたクラウドサービスでは、そのサービスの利用に応じて課金される「従量課金制」を採用しています。 このような従量課金を採用するサービスでは、課金される要素が増加するごとに利用額も増加します。 この特性を攻撃者が悪用することで、サービス提供者がサービスを継続できないレベルまで利用額を増加させる攻撃を、Economic Denial of Sustainability(以下 EDoSと呼称する)と呼びます。
本稿ではAmazon Cognitoを例に、このEDoSについて解説をしていきます。
原因 # 「課金される要素が増加する」ことがEDoSを引き起こす原因となります。 Amazon Cognito User Poolでは、外的要因でこの課金額を増加させる方法として、「月間のアクティブユーザー(MAU)の増加」が挙げられます。
このMAUはCognito User Poolに対して、サインインやサインアップ等の機能を利用したユーザーを1として加算され、100,000MAU以下の場合、1MAUあたり0.0055USD加算されます。
MAU MAUあたりの料金 ～ 100,000 0.0055USD 90万 0.0046USD 900万 0.00325USD 1,000万超 0.0025USD このような料金形態を取るCognito User Poolでは、Cognito User Poolのセルフサインアップが有効化されている際に、攻撃者が大量のユーザーを作成することでサービス提供者が意図しない形でMAUが増加し、料金として請求されます。
影響 # 意図しない利用料金の請求により、サービス提供を行うための予算が利用され、サービスを提供できなくなる恐れがあります。
事例紹介 # 現時点では現実世界においてCognito User Poolをはじめとして、IDaaSを用いたEDoSや利用料金の増加は報告されていません。ただし、NHK厚生文化事業団が運営する寄付サイトへの偽計業務妨害事案をはじめとして、意図しない課金のためサービスが停止した例や実装の不備により異常な課金が発生した例は報告されています。
対策 # 対策としては、攻撃者のユーザー作成やログインの自動化を難しくすることで大量のユーザーの追加を防ぐことができるでしょう。
自動化を難しくする方法として、Custom authentication challengeやAWS WAF等のCognito User Poolの拡張機能を用い、reCaptchaの導入や、Lambdaトリガを用いたEmailアドレスの検証とエイリアス利用の制限等が挙げられます。
学習方法/参考文献 # EDoS Attack: クラウド利用料金でサービスを止められるって本当？: Amazon Cognito User Pool</description></item><item><title>アプリケーションの権限に関するカスタム属性の変更 - IDaaS</title><link>https://webapppentestguidelines.github.io/newtechtestdoc/docs/cloudsec/idaas/modify_custom_attributes_for_permissions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://webapppentestguidelines.github.io/newtechtestdoc/docs/cloudsec/idaas/modify_custom_attributes_for_permissions/</guid><description>アプリケーションの権限に関するカスタム属性の変更 # 概要 # IDaaSの機能を誤って利用することにより、ユーザーに紐づくカスタム属性などの変更が可能になり、アプリケーションにおける権限昇格や意図しないアクセスを引き起こす可能性が存在します。
原因 # 権限情報に関するカスタム属性を変更する機能のアクセス制御が適切に行われていないことから、第三者が属性を変更し権限を書き換える可能性が存在します。本稿ではAmazon Cognitoの誤った利用を例に原因について解説します。
誤った利用の例 1. 権限に関する属性が変更可能
ユーザーに対してアプリケーションの権限に関する属性の変更権限を与えることにより、属性を任意の値に変更される恐れがあります。
$ ACCESS_TOKEN=&amp;#34;eJy...&amp;#34; # JWT形式のアクセストークン $ aws cognito-idp update-user-attributes \ --user-attributes Name=&amp;#34;custom:role&amp;#34;,Value=&amp;#34;admin&amp;#34; \ # アプリケーションの権限に関わるカスタム属性の変更 --access-token $ACCESS_TOKEN 誤った利用の例 2. 公開されたクライアントIDによるアクセス制御
一部IDaaSでは、自らの情報へアクセスを行う際にクライアントIDのような特定の識別子を用いてアクセスを行います。このクライアントIDはユーザの属性に関する変更や閲覧に関する操作を司っており、OIDCにおけるScopeのような動作をします。
このクライアントIDを用いてユーザの属性変更に関するアクセス制御をしており、かつ取得に制限のかけられていないJavaSctriptファイルやapkファイルなどにこの管理者用のクライアントIDが含まれている場合、攻撃者はこのクライアントIDを用いてTokenを発行し、自らの権限に関わる属性を変更しアプリケーション内の権限を昇格させることが可能です。
影響 # 本来であれば閲覧を想定していない第三者が、該当の画面やエンドポイントへアクセスできる可能性があります。
対策 # 根本的対策 # 根本的対策として、一般ユーザーから権限に関わるカスタム属性の値を変更させないようにしてください。権限に関わるカスタム属性の操作を必要とする場合はRBAC等を用いて管理者権限のユーザーのみが変更できるようにしてください。
また、カスタム属性を利用しないで権限を管理する機能がある場合、その機能を用いることも検討してください。
一時的対策 # 一時的対策として、IDaaSへのIP制限等を行い、管理者利用するIDaaSへの一般ユーザーのアクセスをNWレベルで制限してください。
また、本対策を恒久的な対策とせず、根本的な対策を実施してください。
具体: Amazon Cognito User Pool # Amazon Cognito User Poolにおいては、ユーザーの属性で権限情報を管理可能ですが、Cognito User Poolの管理者APIに対してRBACを実装する場合、このユーザグループを用いて管理することも検討してください。
学習方法/参考文献 # Amazon Web Service - Amazon Cognito - ユーザープール属性 Amazon Web Service - Amazon Cognito - ユーザーグループ Flatt Security inc.</description></item><item><title>デフォルトエラーに起因するユーザーの開示 - IDaaS</title><link>https://webapppentestguidelines.github.io/newtechtestdoc/docs/cloudsec/idaas/default_error/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://webapppentestguidelines.github.io/newtechtestdoc/docs/cloudsec/idaas/default_error/</guid><description> デフォルトエラーに起因するユーザーの開示 # 概要 # アプリケーションが返すエラーレスポンスは、攻撃者が攻撃を実施する上での大きなヒントとなることがあります。代表的な例として、Internal Server Error時にサーバ上のプログラムの断片や、SQL文などが見えてしまうことが挙げられます。
認証においても同様で、認証情報がそのサービスで使われているのかを示す詳細なエラーを返すことにより、攻撃者に標的となるユーザーの存在を知らせてしまう可能性があります。
そのような観点からIDaaSでもエラーメッセージについては不要な内容の削除や表記の統一を図ることが必要です。
原因 # CognitoをはじめとするIDaaSのエラーメッセージでは、デフォルトのメッセージが詳細な情報をレスポンスとして返るケースが存在します。
Auth0の場合 Cognitoの場合 影響 # エラーメッセージにおいてサービスに登録しているユーザーのメールアドレスを確認できます。 攻撃者にメールアドレスを取得され、過去に流出した認証情報との組み合わせをもとに不正ログインを試行される可能性があります。
対策 # 対策として、デフォルトのエラーメッセージを変更し、認証認可に係るエラーに関して統一されたカスタムメッセージに変更することを推奨します。
また、上記の対策が不可能なサービス(Firebase AuthのID/Pass認証)も存在するため、その点を考慮して対策等を行ってください。
学習方法/参考文献 # Amazon Web Service - Amazon Cognito - エラーレスポンスの管理 Auth0 OWASP チートシート - 認証とエラー メッセージ Amazon Web Service - Amazon Cognito - 認証チャレンジの作成の Lambda トリガー</description></item><item><title>意図しないサインアップ経路の存在 - IDaaS</title><link>https://webapppentestguidelines.github.io/newtechtestdoc/docs/cloudsec/idaas/presence_of_unintended_signup_paths/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://webapppentestguidelines.github.io/newtechtestdoc/docs/cloudsec/idaas/presence_of_unintended_signup_paths/</guid><description>意図しないサインアップ経路の存在 # 概要 # 管理者画面や会員向けのサービスなどの設計や要件レベルでサインアップ経路を制限しているアプリケーションにおいて、IDaaSの設定不備や誤った利用によって意図しない形でのサインアップが可能になる場合があります。
原因 # 管理者画面や会員向けのサービスなどの設計や要件レベルでのサインアップ経路の例として、管理者以外のユーザによるユーザ作成を想定していないケースが存在します。本稿ではAmazon Cognitoの誤った利用を例に原因について解説します。
$ CLIENT_ID=&amp;#34;xxxxxxxxxxxxxxxxxxxxxxxxxx&amp;#34; $ USER_NAME=&amp;#34;username&amp;#34; $ PASSWORD=&amp;#34;P4ssW0rD&amp;#34; $ ATTRIBUTES=&amp;#34;[]&amp;#34; $ aws cognito-idp sign-up \ --client-id $CLIENT_ID \ --username $USER_NAME \ --password $PASSWORD \ --user-attributes $ATTRIBUTES \ --no-sign-request 誤った利用の例. サインアップに関する不適切な権限の分離
Amazon Cognito User Poolをはじめ、一部のIDaaSではクライアントIDのような識別子を用いて発行されるTokenに権限設定しています。Cognitoではアプリクライアントと呼ばれるクライアントIDを用いてTokenを発行しており、このアプリクライアントに設定される権限をOIDCのScopeとして、JWT形式のトークンを発行します。
このアプリクライアントを一般ユーザと管理者ユーザで分けて利用している場合、属性へのアクセスに関しては制御可能ですが、サインアップに関してはアプリクライアントを介して制御できません。そのため、本来意図したサインアップ経路を制限できないため、第三者がこのアプリクライアントを介して自己サインアップが行えてしまいます。
影響 # 本来であれば閲覧を想定していない第三者が、該当の画面やエンドポイントへのアクセスを行える可能性があります。
対策 # 限定されたサインアップの場合、自己サインアップをはじめとした、利用者が自らユーザを作成できる機能の無効化してください。また、自己サインアップ機能を無効化できない場合、それに準ずる対策が必要となります。
また、管理者による作成に際しては、各IDaaSの提供するAPIへのアクセス方法に準拠し管理者用APIを用いて作成していることを確認してください。
確認リスト # 仕様上、第三者のサインアップを許可していない 第三者のサインアップを許可していない場合 IDaaSの設定で自己サインアップが制御できる 自己サインアップが許可されていない IDaaSの設定で自己サインアップが制御できない 他の機能を用いて認可制御を行える 根本的対策 # 自己サインアップを許可しない設計や要件の場合、根本的対策として該当する機能を無効化し、ユーザによるサインアップを許可しないようにしてください。 無効後に新規作成する際は、RBAC等のアクセス制御を用いて、操作が可能なユーザを限定してください。
自己サインアップを無効化できない場合は、管理者による新規作成フローにおいて、利用者から操作できないカスタム属性などを用いて該当アカウントが管理者作成のアカウントであることを証明する属性を追加し、認可やアクセス制御の際に確認してください。
一時的対策 # 一時的対策として、IDaaSへのIP制限等を行い、管理者利用するIDaaSへの一般ユーザーのアクセスをIPレベルで制限してください。
また、本対策を恒久的な対策とせず、根本的な対策を用いて順次対策してください。
具体: Amazon Cognitoの場合 # Amazon Cognito User Poolにおいては、ユーザーの自己サインアップを無効化する機能が存在するので、この機能を無効化してください。</description></item></channel></rss>