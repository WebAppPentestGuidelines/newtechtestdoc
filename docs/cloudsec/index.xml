<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>クラウドサービスにおけるWebサービスにまつわる脆弱性 on WebApp Testing</title><link>https://webapppentestguidelines.github.io/newtechtestdoc/docs/cloudsec/</link><description>Recent content in クラウドサービスにおけるWebサービスにまつわる脆弱性 on WebApp Testing</description><generator>Hugo -- gohugo.io</generator><language>ja</language><atom:link href="https://webapppentestguidelines.github.io/newtechtestdoc/docs/cloudsec/index.xml" rel="self" type="application/rss+xml"/><item><title>FaaSにおける設定不備と脆弱性の悪用</title><link>https://webapppentestguidelines.github.io/newtechtestdoc/docs/cloudsec/faas/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://webapppentestguidelines.github.io/newtechtestdoc/docs/cloudsec/faas/</guid><description>FaaSにおける設定不備と脆弱性の悪用 # 概要 # 本稿では、ウェブやモバイルのアプリケーションで利用されるプログラムの実行を行うサービスである、FaaSの活用と、実装や利用方法が起因となるアプリケーションの脆弱性について解説を行います。
FaaSとは # FaaS(Function as a Service)は、サーバーレスなアプリケーションやマイクロサービスで用いられるサービスで、一定の制約下でプログラムを実行を実行可能にする、IaaSやPaaSのようにクラウド上で利用可能なコンピュータリソースを提供するサービス形態の一つです。
このFaaSは多くのクラウドベンダーで提供されており、私たちは気づかないうちにこれらサービスと向き合っているかもしれません。
AWS Lambda Google Cloud Functions Azure Functions Cloudflare Workers Netlify Functions FaaSの特徴として、あるイベントをトリガーにLambdaにホストされたプログラムが実行されることが挙げられます。下記に簡単な例
例: Amazon Web Service Japan 形で考えるサーバーレス設計より
API Gateway + Lambda + DynamoDBを用いたAPI APIをサーバーレスで構築する際の基本パターンで、API Gatewayへのリクエストをトリガーに実行されます。 S3にアップロード時に画像を加工するためのLambda S3 Bucketに画像やファイルをアップロードしたイベントをトリガーにLambdaを実行するデザインパターンです。 SNS + SQS(Queue) + Lambdaを用いた業務処理 各種重要処理や競合/重複状態を回避するために利用されるデザインパターンで、SNSのPubSub機能を用いて、SQSに投入し、LambdaがそのイベントをもとにQueueに入ったデータを取得し実行されます。 脆弱性 / 脅威 / 悪用 # 本稿では、FaaSの利用や設定ミスによって発生するセキュリティ上の脅威や悪用について、下記のページにて触れていきます。また、Injectionやエラー情報の開示といった「アプリケーションの実装」に起因するものは個別には取り扱いませんのでご了承ください。
概要 # 多くのクラウドプロバイダーの提供するFaaSでは、プログラムを実行する際に用いる環境変数設定できる機能が存在します。これら環境変数機能を用いることで、FaaS上で動作するアプリケーション等に値を渡すことが可能です。 この機能では基本的にAPIキーやDBの認証情報、IAMの認証情報などの機密性の高い情報を格納することを非推奨の項目としています。しかし、この環境変数内に認証情報を格納することは禁止されているわけではないため、利用者の実装次第ではこれら情報が含まれている可能性が存在します。 このように環境変数を用いることは、直接的な攻撃につながるわけではありませんが潜在的に認証情報が取得される可能性を高めている状況にあります。
原理 # FaaSの環境変数に格納された認証情報は、/proc/self/environ等から読み取ることが可能で、アプリケーション上の実装の不備をつくことで、入手される可能性があります。
擬似環境での解説 # 例として、AWS Lambda(AWSの提供するFaaS)上で動作する擬似的な環境をもとに解説をします。
擬似環境の構成図 このAWS Lambdaには、環境変数にSECRET_KEYという環境変数が設定されており、その値にはSECRET_DUMMYという値が設定されています。そして、動作するコードとして下記のようなJavaScriptのコードが動いています。 このアプリケーションはざっくりな機能として、S3からファイルを取得し、その後Lambda内で加工してクライアントに返すという機能を持っています。 app.</description></item><item><title>Webアプリケーションの脆弱性を利用した認証情報の窃取</title><link>https://webapppentestguidelines.github.io/newtechtestdoc/docs/cloudsec/cloud_credential/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://webapppentestguidelines.github.io/newtechtestdoc/docs/cloudsec/cloud_credential/</guid><description>Webアプリケーションの脆弱性を利用した認証情報の窃取 # 概要 # クラウド環境を利用してWebサービスを提供するシステムにおいて、脆弱性を利用されクラウドサービス側の認証情報（認証キー・APIトークンなど）を窃取されてしまう可能性が危険視されています。 これらの認証情報が漏洩した場合には、漏洩した認証情報に紐ずく権限を利用され、クラウドプラットフォーム側の機能を悪用されてしまう危険性があります。 上記のような攻撃には従来から存在するWebアプリケーションの脆弱性を利用される可能性があります。
原因と影響 # 認証情報の種類や存在する場所などについては、利用しているクラウドプラットフォームやサービスの種類によって異なります。 あくまで一例ですがシステム内の環境変数・設定ファイルなどにこれらの認証情報が設定されているケースが多く、Webアプリケーションの脆弱性を利用されることによって窃取されてしまう危険性があります。
Webアプリケーションにて詳細情報を表示するエラー画面などから環境変数に設定された認証情報が漏洩 ディレクトリトラバーサルの脆弱性を利用されて、設定ファイルに記載された認証情報が漏洩 また、AWSなどのパブリッククラウドサービスではメタデータサービスと呼ばれる機能が存在します。 この機能では、メタデータと呼ばれるインスタンス固有のデータ(インスタンスID、OSデータ、一時的に付与される認証情報など)を内部Web APIを通じて取得するといったしくみが提供されています。 SSRF(Server Side Request Forgery)の脆弱性を利用することで、この機能を悪用してメタデータを不正に取得され、認証情報を窃取されてしまう攻撃手法が知られています。
診断観点 # 本記事ではAWS環境を題材にSSRFを脆弱性を利用して、認証情報を取得する流れについて紹介します。
SSRFは、攻撃者が指定した任意のサーバに対してHTTPリクエストを行うように、サーバサイドアプリケーションを誘導させるというものです。 これを利用して、攻撃者は脆弱性の存在するサーバを踏み台として他サーバにアクセスしたり、自身が直接到達できないサーバに対してアクセスできます。
脆弱性の例として、以下のPHPのサンプルコードを用意しました。
&amp;lt;?php
if (isset($_GET[&amp;#39;url&amp;#39;])){
$url = $_GET[&amp;#39;url&amp;#39;];
$conn = curl_init();
curl_setopt($conn, CURLOPT_URL, $url);
curl_setopt($conn, CURLOPT_RETURNTRANSFER, true);
$res = curl_exec($conn);
echo $res;
curl_close($conn);
}
?&amp;gt; GETパラメータで取得したURL値に対して、PHPのcURL関数によりHTTPリクエストを送信し、結果を出力するだけのシンプルなコードです。 もしこのようなWebアプリケーションが存在し、公開されていた場合にはSSRF攻撃を受けてしまう可能性があります。 上記で説明したように、このWebアプリケーションではurlパラメータに指定した値をそのままcURL関数にて取得する実装となっています。 そのため、クライアント側がurlパラメータに任意のURL値を指定して受け渡すことで、Webアプリケーションに指定したURLの対象に対してアクセスさせ、レスポンスを取得できます。
この挙動を利用することで、以下の図のように攻撃者は本来アクセスできないような対象に対して、Webアプリケーションを経由してアクセスを行い、情報を取得できます。 これは、SSRFを用いた内部ネットワークへの攻撃の一例となります。
もし、クラウド環境にて提供されているWebアプリケーションに上記のようなSSRFの脆弱性が存在する場合には、この機能を悪用され、メタデータを不正に取得されてしまう可能性があります。以下の図では、AWS環境におけるSSRF攻撃を記載しています。
図ではIAMロールが紐づいた状態のEC2インスタンスにおけるSSRF攻撃によって、Webアプリケーション側がメタデータサーバのAPIへ一時的な認証情報を要求するリクエストを強制させられています。 その結果、EC２のIAMロールに紐づいた認証情報を窃取されてしまう流れを記載しています。 ここでは、EC2にアタッチされているIAMロールに関連付けられた認証情報を、この図のようなSSRF攻撃によって取得する流れの詳細を説明します。
AWSのメタデータサーバに関する仕様は以下に記載されています。
インスタンスメタデータとユーザーデータ EC2インスタンス上より上記仕様に記載されているURLにアクセスすることで、該当するメタデータの情報を取得できます。 EC2インスタンスにアタッチされたIAMロールが存在する場合には、以下のメタデータサーバのURLにアクセスすることで、認証情報を取得できます。
http://169.254.169.254/latest/meta-data/iam/security-credentials/[role-name] 上記のパス中の[role-name]の部分にはEC2にアタッチされているIAMロールの名前を指定する必要があります。 上記URLにアクセスすることで指定したIAMロールに関連付けられた一時的なセキュリティ認証情報が格納される仕様となっています。なお、IAMロール名は以下のURLアクセスすることで取得できます。
http://169.254.169.254/latest/meta-data/iam/security-credentials/ AWSのEC2上でSSRFの脆弱性が存在するサンプルコードのWebアプリケーション(ssrf.php)が動作しているとします。 まず、SSRFの脆弱性を利用してメタデータサーバのURLをパラメータ値として脆弱性の存在するWebアプリケーションに送信することによって、EC2にアタッチされたrole-nameを取得します。</description></item><item><title>クラウドストレージサービスにおける設定不備</title><link>https://webapppentestguidelines.github.io/newtechtestdoc/docs/cloudsec/storage_service/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://webapppentestguidelines.github.io/newtechtestdoc/docs/cloudsec/storage_service/</guid><description>クラウドストレージサービスにおける設定不備 # 概要 # クラウドストレージサービスとは、インターネット上にてファイルの保管・共有などができるサービスです。 画像やJavascriptファイルなどの静的ファイルを公開する用途などでも利用されています。 有名処のものとしては以下のようなサービスがあります。
AWS S3 Azure Blob Storage Cloud Storage 近年ではこれらクラウドストレージサービスの設定ミスによるセキュリティインシデントが発生しています。
原因と影響 # クラウドストレージサービスにおけるアクセス許可の設定不備が原因となり、意図しない情報がインターネット上に公開されてしまう可能性があります。 また、ファイルのアップロードが可能となっている場合には、公開しているコンテンツに悪意あるコードを埋め込まれ、攻撃に利用されてしまう可能性もあります。
診断観点 # クラウドストレージの設定ミスを確認するシンプルな方法としては、クラウドストレージのエンドポイントに対応するURLに実際にアクセスすることです。 そして、セキュリティ上問題となるような設定やコンテンツが公開されていないかを確認します。 本記事ではAWS S3を例として、脆弱性診断における本手法について説明します。
S3バケットを示すエンドポイントのURLについて調査 # クラウドストレージを示すURLの形式に関する仕様は以下のように公開されています。
AWS S3 Azure Blob Storage Cloud Storage ここではAWS S3について解説しますが、S3ではクラウドストレージのエンドポイントを示すURLは以下2種類のタイプが存在します。
仮想ホスト形式
http://&amp;lt;backet-name&amp;gt;.s3-&amp;lt;region&amp;gt;.amazonaws.com/ http://&amp;lt;backet-name&amp;gt;.s3.amazonaws.com/
2019 年 3 月 20 日より後に開始されたリージョンで作成されたバケットでは2の形式(レガシーグローバルエンドポイント)では到達できないようです。 パス形式
http://s3-&amp;lt;region&amp;gt;.amazonaws.com/&amp;lt;backet-name&amp;gt; http://s3.amazonaws.com/&amp;lt;backet-name&amp;gt;
米国東部 (バージニア北部) リージョンは2の形式で、ほかのリージョンは1の形式となります。パス形式は将来的には廃止が検討されているようです。 上記の仕様を利用して、特定キーワードなどに関連するS3バケットのエンドポイントのURLを推測できます。 また、S3バケットにおいて独自ドメインを利用して、静的なサイトをホスティングする場合には、前提としてバケット名とドメイン名が一致する必要があります。 このため、Webページのドメイン名などからもエンドポイントのURLを推測できます。
特定のキーワードに関連するS3バケットを探索するようなツールも多数公開されています。
s3recon s3finder また、公開状態のクラウドストレージやファイルの情報を定期的に収集し、検索できるオンラインサービスなども存在します。本サービスでは、S3だけではなくAzureやGCPなど他クラウドサービスの情報も検索できます。
Grayhatwarfare 脆弱性診断の実施時にはクラウドストレージのエンドポイントにアクセスするために、診断対象サイトのHTMLソース・HTTPレスポンス・モバイルアプリケーションのソースコード内などに、S3バケットのURLや探索するためのキーワードが、存在しないかを確認すべきでしょう。なお、探索によって存在が判明したS3バケットのエンドポイントのURLが診断対象の範囲に含まれるかどうかについては、調査する前にあらかじめ顧客やサイト管理者に対して確認するべきであると考えます。
ブラウザでの確認 # ブラウザ経由でアクセスして、S3バケットにおいてファイルの一覧の表示が許可されている場合には以下のようなXML形式のレスポンスが表示されます。
この設定状態の場合には、不特定多数にストレージ内に存在するファイルの内容が判明してしまうため、いわゆるディレクトリリスティングと同様の問題があるといえます。そのためこの設定状態が意図したものであるかを確認すべきでしょう。
コマンドラインでの確認 # コマンドラインを用いて、クラウドストレージのファイルのダウンロードや、ファイルのアップロードについて確認できます。
S3バケットであればAWS CLIを利用することで上記をテストできます。 S3においては、S3バケットのACLがAll Authenticated AWS Usersと設定されている可能性もあるため、AWSユーザーとして認証された状態でもコマンドラインを実行する方が良いでしょう。</description></item></channel></rss>